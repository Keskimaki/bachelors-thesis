@article{Watada19,
  title = {Emerging Trends, Techniques and Open Issues of Containerization: A Review},
  author = {Watada, Junzo and Roy, Arunava and Kadikar, Ruturaj and Pham, Hoang and Xu, Bing},
  year = 2019,
  journal = {IEEE Access},
  volume = 7,
  number = {},
  pages = {152443--152472},
  doi = {10.1109/ACCESS.2019.2945930}
}
@inproceedings{Naydenov23,
  title = {Cloud Container Orchestration Architectures, Models and Methods: a Systematic Mapping Study},
  author = {Naydenov, Nikolas and Ruseva, Stela},
  year = 2023,
  booktitle = {2023 22nd International Symposium INFOTEH-JAHORINA (INFOTEH)},
  volume = {},
  number = {},
  pages = {1--8},
  doi = {10.1109/INFOTEH57020.2023.10094059}
}
@article{Khan17,
  title = {Key Characteristics of a Container Orchestration Platform to Enable a Modern Application},
  author = {Khan, Asif},
  year = 2017,
  journal = {IEEE Cloud Computing},
  volume = 4,
  number = 5,
  pages = {42--48},
  doi = {10.1109/MCC.2017.4250933}
}
@inproceedings{Malviya22,
  title = {A Comparative Analysis of Container Orchestration Tools in Cloud Computing},
  author = {Malviya, Anshita and Dwivedi, Rajendra Kumar},
  year = 2022,
  booktitle = {2022 9th International Conference on Computing for Sustainable Global Development (INDIACom)},
  volume = {},
  number = {},
  pages = {698--703},
  doi = {10.23919/INDIACom54597.2022.9763171}
}
@article{Truyen19,
  title = {A Comprehensive Feature Comparison Study of Open-Source Container Orchestration Frameworks},
  author = {Truyen, Eddy and Van Landuyt, Dimitri and Preuveneers, Davy and Lagaisse, Bert and Joosen, Wouter},
  year = 2019,
  journal = {Applied Sciences},
  volume = 9,
  number = 5,
  doi = {10.3390/app9050931},
  issn = {2076-3417},
  url = {https://www.mdpi.com/2076-3417/9/5/931},
  article-number = 931,
  abstract = {(1) Background: Container orchestration frameworks provide support for management of complex distributed applications. Different frameworks have emerged only recently, and they have been in constant evolution as new features are being introduced. This reality makes it difficult for practitioners and researchers to maintain a clear view of the technology space. (2) Methods: we present a descriptive feature comparison study of the three most prominent orchestration frameworks: Docker Swarm, Kubernetes, and Mesos, which can be combined with Marathon, Aurora or DC/OS. This study aims at (i) identifying the common and unique features of all frameworks, (ii) comparing these frameworks qualitatively and quantitatively with respect to genericity in terms of supported features, and (iii) investigating the maturity and stability of the frameworks as well as the pioneering nature of each framework by studying the historical evolution of the frameworks on GitHub. (3) Results: (i) we have identified 124 common features and 54 unique features that we divided into a taxonomy of 9 functional aspects and 27 functional sub-aspects. (ii) Kubernetes supports the highest number of accumulated common and unique features for all 9 functional aspects; however, no evidence has been found for significant differences in genericity with Docker Swarm and DC/OS. (iii) Very little feature deprecations have been found and 15 out of 27 sub-aspects have been identified as mature and stable. These are pioneered in descending order by Kubernetes, Mesos, and Marathon. (4) Conclusion: there is a broad and mature foundation that underpins all container orchestration frameworks. Likely areas for further evolution and innovation include system support for improved cluster security and container security, performance isolation of GPU, disk and network resources, and network plugin architectures.}
}
@inproceedings{Jawarneh19,
  title = {Container Orchestration Engines: A Thorough Functional and Performance Comparison},
  author = {Jawarneh, Isam Mashhour Al and Bellavista, Paolo and Bosi, Filippo and Foschini, Luca and Martuscelli, Giuseppe and Montanari, Rebecca and Palopoli, Amedeo},
  year = 2019,
  booktitle = {ICC 2019 - 2019 IEEE International Conference on Communications (ICC)},
  volume = {},
  number = {},
  pages = {1--6},
  doi = {10.1109/ICC.2019.8762053}
}
@article{Bernstein14,
  title = {Containers and Cloud: From LXC to Docker to Kubernetes},
  author = {Bernstein, David},
  year = 2014,
  journal = {IEEE Cloud Computing},
  volume = 1,
  number = 3,
  pages = {81--84},
  doi = {10.1109/MCC.2014.51}
}
@misc{Kubernetes23,
  title = {Overview},
  author = {Kubernetes},
  year = 2023,
  url = {https://kubernetes.io/docs/concepts/overview},
  note = {[haettu 24.9.2023]}
}
@inproceedings{Jabbari16,
  title = {What is DevOps? A Systematic Mapping Study on Definitions and Practices},
  author = {Jabbari, Ramtin and bin Ali, Nauman and Petersen, Kai and Tanveer, Binish},
  year = 2016,
  booktitle = {Proceedings of the Scientific Workshop Proceedings of XP2016},
  location = {Edinburgh, Scotland, UK},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  series = {XP '16 Workshops},
  doi = {10.1145/2962695.2962707},
  isbn = 9781450341349,
  url = {https://doi.org/10.1145/2962695.2962707},
  articleno = 12,
  numpages = 11,
  keywords = {Software development method, DevOps definition, DevOps practice}
}
@article{Klein21,
  title = {The DevOps: A Concise Understanding to the DevOps Philosophy and Science},
  author = {Klein, Brandon Thorin},
  year = 2021,
  month = 5,
  journal = {},
  doi = {10.2172/1785164},
  url = {https://www.osti.gov/biblio/1785164},
  abstractnote = {This writing examines the DevOps practice from a new perspective, one of understanding its philosophical and scientific nature. DevOps has fundamentally changed the landscape for research and development based on guiding philosophical and scientific principles. Advanced computational technologies and domains have adopted DevOps to enable advanced solution engineering for efficient, quality-assured output. The author provides a concise account of how the philosophy and science of DevOps synergistically defines its essential disposition.},
  place = {United States}
}
@misc{Wikimedia23,
  title = {DevOps toolchain},
  author = {{Wikimedia Commons}},
  year = 2023,
  url = {https://upload.wikimedia.org/wikipedia/commons/0/05/Devops-toolchain.svg},
  note = {[haettu 24.9.2023]}
}
@inproceedings{Kang16,
  title = {Container and Microservice Driven Design for Cloud Infrastructure DevOps},
  author = {Kang, Hui and Le, Michael and Tao, Shu},
  year = 2016,
  booktitle = {2016 IEEE International Conference on Cloud Engineering (IC2E)},
  volume = {},
  number = {},
  pages = {202--211},
  doi = {10.1109/IC2E.2016.26}
}
@inproceedings{Dua14,
  title = {Virtualization vs Containerization to Support PaaS},
  author = {Dua, Rajdeep and Raja, A Reddy and Kakadia, Dharmesh},
  year = 2014,
  booktitle = {2014 IEEE International Conference on Cloud Engineering},
  volume = {},
  number = {},
  pages = {610--614},
  doi = {10.1109/IC2E.2014.41}
}
@inproceedings{Narasimhulu23,
  title = {Investigating the Impact of Containerization on the Deployment Process in DevOps},
  author = {Narasimhulu, Modugula and Mounika, Darapureddy Veera and Varshini, Puttagunta and K, Amarendra and Rao, TK Rama Krishna},
  year = 2023,
  booktitle = {2023 2nd International Conference on Edge Computing and Applications (ICECAA)},
  volume = {},
  number = {},
  pages = {679--685},
  doi = {10.1109/ICECAA58104.2023.10212240}
}
@inproceedings{Kousa20,
  title = {Teaching Container-Based DevOps Practices},
  author = {Kousa, Jami and Ihantola, Petri and Hellas, Arto and Luukkainen, Matti},
  year = 2020,
  booktitle = {Web Engineering},
  publisher = {Springer International Publishing},
  address = {Cham},
  pages = {494--502},
  isbn = {978-3-030-50578-3},
  editor = {Bielikova, Maria and Mikkonen, Tommi and Pautasso, Cesare},
  abstract = {We present the design of a online course that focuses on container-based virtualization as part of the DevOps toolchain. In addition, we outline the professional background of participants taking the course, and describe how this affects perceived previous knowledge of DevOps. We found out that the self-evaluated conceptual understanding of DevOps topics is nearly equal regardless of the participants professional identity (e.g., student or developer). However, there are significant differences in how much participants have used tools like Docker before. We conclude that there is a clear need for lifelong learning among software engineering professionals as (future) developers often struggle in operations related skills such as command line or networking.}
}
@article{Leite19,
  title = {A Survey of DevOps Concepts and Challenges},
  author = {Leite, Leonardo and Rocha, Carla and Kon, Fabio and Milojicic, Dejan and Meirelles, Paulo},
  year = 2019,
  month = {nov},
  journal = {ACM Comput. Surv.},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = 52,
  number = 6,
  doi = {10.1145/3359981},
  issn = {0360-0300},
  url = {https://doi.org/10.1145/3359981},
  issue_date = {November 2020},
  abstract = {DevOpsis a collaborative and multidisciplinary organizational effort to automate continuous delivery of new software updates while guaranteeing their correctness and reliability. The present survey investigates and discusses DevOps challenges from the perspective of engineers, managers, and researchers. We review the literature and develop a DevOps conceptual map, correlating the DevOps automation tools with these concepts. We then discuss their practical implications for engineers, managers, and researchers. Finally, we critically explore some of the most relevant DevOps challenges reported by the literature.},
  articleno = 127,
  numpages = 35,
  keywords = {configuration management, release process, continuous (delivery, deployment, integration), DevOps, versioning, and build process}
}
@article{Alnafessah21,
  title = {Quality-Aware DevOps Research: Where Do We Stand?},
  author = {Alnafessah, Ahmad and Gias, Alim Ul and Wang, Runan and Zhu, Lulai and Casale, Giuliano and Filieri, Antonio},
  year = 2021,
  journal = {IEEE Access},
  volume = 9,
  number = {},
  pages = {44476--44489},
  doi = {10.1109/ACCESS.2021.3064867}
}
@article{Shahin17,
  title = {Continuous Integration, Delivery and Deployment: A Systematic Review on Approaches, Tools, Challenges and Practices},
  author = {Shahin, Mojtaba and Ali Babar, Muhammad and Zhu, Liming},
  year = 2017,
  journal = {IEEE Access},
  volume = 5,
  number = {},
  pages = {3909--3943},
  doi = {10.1109/ACCESS.2017.2685629}
}
@inproceedings{Abraham20,
  title = {On the Use of Containers in High Performance Computing Environments},
  author = {Abraham, Subil and Paul, Arnab K. and Khan, Redwan Ibne Seraj and Butt, Ali R.},
  year = 2020,
  booktitle = {2020 IEEE 13th International Conference on Cloud Computing (CLOUD)},
  volume = {},
  number = {},
  pages = {284--293},
  doi = {10.1109/CLOUD49709.2020.00048}
}
@inproceedings{Gantikow20,
  title = {Rootless Containers with Podman for HPC},
  author = {Gantikow, Holger and Walter, Steffen and Reich, Christoph},
  year = 2020,
  booktitle = {High Performance Computing},
  publisher = {Springer International Publishing},
  address = {Cham},
  pages = {343--354},
  isbn = {978-3-030-59851-8},
  editor = {Jagode, Heike and Anzt, Hartwig and Juckeland, Guido and Ltaief, Hatem},
  abstract = {Containers have become popular in HPC environments to improve the mobility of applications and the delivery of user-supplied code. In this paper we evaluate Podman, an enterprise container engine that supports rootless containers, in combination with runc and crun as container runtimes using a real-world workload with LS-DYNA, and the industry-standard benchmarks sysbench and STREAM. The results suggest that Podman with crun only introduces a similar low overhead as HPC-focused container technologies.}
}
@article{Zhou21,
  title = {Container orchestration on HPC systems through Kubernetes},
  author = {Zhou, Naweiluo and Georgiou, Yiannis and Pospieszny, Marcin and Zhong, Li and Zhou, Huan and Niethammer, Christoph and Pejak, Branislav and Marko, Oskar and Hoppe, Dennis},
  year = 2021,
  month = {Feb},
  day = 22,
  journal = {Journal of Cloud Computing},
  volume = 10,
  number = 1,
  pages = 16,
  doi = {10.1186/s13677-021-00231-z},
  issn = {2192-113X},
  url = {https://doi.org/10.1186/s13677-021-00231-z},
  abstract = {Containerisation demonstrates its efficiency in application deployment in Cloud Computing. Containers can encapsulate complex programs with their dependencies in isolated environments making applications more portable, hence are being adopted in High Performance Computing (HPC) clusters. Singularity, initially designed for HPC systems, has become their de facto standard container runtime. Nevertheless, conventional HPC workload managers lack micro-service support and deeply-integrated container management, as opposed to container orchestrators. We introduce a Torque-Operator which serves as a bridge between HPC workload manager (TORQUE) and container orchestrator (Kubernetes). We propose a hybrid architecture that integrates HPC and Cloud clusters seamlessly with little interference to HPC systems where container orchestration is performed on two levels.}
}
@book{Burns22,
  title = {Kubernetes: up and running},
  author = {Burns, Brendan and Beda, Joe and Hightower, Kelsey and Evenson, Lachlan},
  year = 2022,
  publisher = {" O'Reilly Media, Inc."}
}
@misc{Spaleta19,
  title = {How Kubernetes works},
  author = {Jef Spaleta},
  year = 2019,
  url = {https://www.cncf.io/blog/2019/08/19/how-kubernetes-works/},
  note = {[haettu 01.10.2023]}
}
@article{Medel18,
  title = {Characterising resource management performance in Kubernetes},
  author = {Víctor Medel and Rafael Tolosana-Calasanz and José Ángel Bañares and Unai Arronategui and Omer F. Rana},
  year = 2018,
  journal = {Computers & Electrical Engineering},
  volume = 68,
  pages = {286--297},
  doi = {https://doi.org/10.1016/j.compeleceng.2018.03.041},
  issn = {0045-7906},
  url = {https://www.sciencedirect.com/science/article/pii/S0045790617315240},
  keywords = {Performance models, Container lifecycle, Cloud resource management, Petri nets, Kubernetes},
  abstract = {A key challenge for supporting elastic behaviour in cloud systems is to achieve a good performance in automated (de-)provisioning and scheduling of computing resources. One of the key aspects that can be significant is the overheads associated with deploying, terminating and maintaining resources. Therefore, due to their lower start up and termination overhead, containers are rapidly replacing Virtual Machines (VMs) in many cloud deployments, as the computation instance of choice. In this paper, we analyse the performance of Kubernetes achieved through a Petri net-based performance model. Kubernetes is a container management system for a distributed cluster environment. Our model can be characterised using data from a Kubernetes deployment, and can be exploited for supporting capacity planning and designing Kubernetes-based elastic applications.}
}
@inproceedings{Saha18,
author = {Saha, Pankaj and Beltre, Angel and Uminski, Piotr and Govindaraju, Madhusudhan},
title = {Evaluation of Docker Containers for Scientific Workloads in the Cloud},
year = {2018},
isbn = {9781450364461},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3219104.3229280},
doi = {10.1145/3219104.3229280},
abstract = {The HPC community is actively researching and evaluating tools to support execution of scientific applications in cloud-based environments. Among the various technologies, containers have recently gained importance as they have significantly better performance compared to full-scale virtualization, support for microservices and DevOps, and work seamlessly with workflow and orchestration tools. Docker is currently the leader in containerization technology because it offers low overhead, flexibility, portability of applications, and reproducibility. Singularity is another container solution that is of interest as it is designed specifically for scientific applications. It is important to conduct performance and feature analysis of the container technologies to understand their applicability for each application and target execution environment.This paper presents a (1) performance evaluation of Docker and Singularity on bare metal nodes in the Chameleon cloud (2) mechanism by which Docker containers can be mapped with InfiniBand hardware with RDMA communication and (3) analysis of mapping elements of parallel workloads to the containers for optimal resource management with container-ready orchestration tools. Our experiments are targeted toward application developers so that they can make informed decisions on choosing the container technologies and approaches that are suitable for their HPC workloads on cloud infrastructure. Our performance analysis shows that scientific workloads for both Docker and Singularity based containers can achieve near-native performance.Singularity is designed specifically for HPC workloads. However, Docker still has advantages over Singularity for use in clouds as it provides overlay networking and an intuitive way to run MPI applications with one container per rank for fine-grained resources allocation. Both Docker and Singularity make it possible to directly use the underlying network fabric from the containers for coarsegrained resource allocation.},
booktitle = {Proceedings of the Practice and Experience on Advanced Research Computing},
articleno = {11},
numpages = {8},
keywords = {Singularity, Docker, scientific workloads},
location = {Pittsburgh, PA, USA},
series = {PEARC '18}
}